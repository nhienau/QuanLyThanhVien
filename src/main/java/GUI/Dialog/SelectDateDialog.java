package GUI.Dialog;

import POJO.DateRange;
import helper.DateHelper;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import javax.swing.JOptionPane;
import helper.SelectDateCallback;

public class SelectDateDialog extends javax.swing.JDialog {

    private int dateRangeLength; // Ràng buộc chỉ được chọn khoảng thời gian tối đa bao nhiêu ngày; truyền giá trị 0 nếu không cần ràng buộc
    private DateRange initialDateRange;
    private boolean canSelectAfterToday; // Cho phép chọn thời gian sau ngày hôm nay không
    private LocalDateTime oldestDate;
    private SelectDateCallback callback;

    public SelectDateDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public SelectDateDialog(javax.swing.JFrame owner, boolean modal, DateRange dateRange, int dateRangeLength, boolean canSelectAfterToday, LocalDateTime oldestDate, SelectDateCallback callback) {
        super(owner, modal);
        initComponents();
        this.dateRangeLength = dateRangeLength;
        this.initialDateRange = dateRange;
        this.canSelectAfterToday = canSelectAfterToday;
        this.oldestDate = oldestDate;
        this.callback = callback;
        setLocationRelativeTo(owner);
        if (dateRange.getFromDate() != null && dateRange.getToDate() != null) {
            dcFrom.setDate(DateHelper.convertLDTToDateObj(dateRange.getFromDate()));
            dcTo.setDate(DateHelper.convertLDTToDateObj(dateRange.getToDate()));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        pContainer = new javax.swing.JPanel();
        lblFrom = new javax.swing.JLabel();
        dcFrom = new com.toedter.calendar.JDateChooser();
        lblTo = new javax.swing.JLabel();
        dcTo = new com.toedter.calendar.JDateChooser();
        btnApply = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Chọn ngày");
        setResizable(false);

        pContainer.setBackground(new java.awt.Color(255, 255, 255));

        lblFrom.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblFrom.setForeground(new java.awt.Color(0, 0, 0));
        lblFrom.setText("Từ ngày");

        dcFrom.setForeground(new java.awt.Color(255, 255, 255));
        dcFrom.setDateFormatString("dd/MM/yyyy");
        dcFrom.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        lblTo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblTo.setForeground(new java.awt.Color(0, 0, 0));
        lblTo.setText("Đến ngày");

        dcTo.setForeground(new java.awt.Color(255, 255, 255));
        dcTo.setDateFormatString("dd/MM/yyyy");
        dcTo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        btnApply.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnApply.setForeground(new java.awt.Color(0, 0, 0));
        btnApply.setText("Áp dụng");
        btnApply.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplyActionPerformed(evt);
            }
        });

        btnCancel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnCancel.setForeground(new java.awt.Color(0, 0, 0));
        btnCancel.setText("Huỷ bỏ");
        btnCancel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pContainerLayout = new javax.swing.GroupLayout(pContainer);
        pContainer.setLayout(pContainerLayout);
        pContainerLayout.setHorizontalGroup(
                pContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pContainerLayout.createSequentialGroup()
                                .addContainerGap(84, Short.MAX_VALUE)
                                .addGroup(pContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(dcFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblFrom))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 96, Short.MAX_VALUE)
                                .addGroup(pContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblTo)
                                        .addComponent(dcTo, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(96, 96, 96))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pContainerLayout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnApply)
                                .addGap(18, 18, 18)
                                .addComponent(btnCancel)
                                .addGap(24, 24, 24))
        );
        pContainerLayout.setVerticalGroup(
                pContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pContainerLayout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addGroup(pContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(lblFrom)
                                        .addComponent(lblTo))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(dcTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(dcFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 191, Short.MAX_VALUE)
                                .addGroup(pContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnApply)
                                        .addComponent(btnCancel))
                                .addGap(16, 16, 16))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(pContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(pContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>                        

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        this.dispose();
    }

    private void btnApplyActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        Date fromDate = dcFrom.getDate();
        Date toDate = dcTo.getDate();
        if (fromDate == null || toDate == null) {
            JOptionPane.showMessageDialog(SelectDateDialog.this, "Vui lòng chọn đầy đủ các trường ngày", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (fromDate.after(toDate)) {
            JOptionPane.showMessageDialog(SelectDateDialog.this, "Ngày bắt đầu không được lớn hơn ngày kết thúc", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        LocalDateTime localFromDate = DateHelper.convertDateObjToLDT(fromDate, DateHelper.SYSTEM_DEFAULT_TIME_ZONE);
        LocalDateTime localToDate = DateHelper.convertDateObjToLDT(toDate, DateHelper.SYSTEM_DEFAULT_TIME_ZONE);

        if (initialDateRange.getFromDate() != null && initialDateRange.getToDate() != null && (localFromDate.toLocalDate().isEqual(initialDateRange.getFromDate().toLocalDate())) && (localToDate.toLocalDate().isEqual(initialDateRange.getToDate().toLocalDate()))) {
            this.dispose();
            return;
        }

        long differenceInDays = ChronoUnit.DAYS.between(localFromDate, localToDate);

        if (dateRangeLength != 0 && differenceInDays > dateRangeLength) {
            JOptionPane.showMessageDialog(SelectDateDialog.this, "Khoảng thời gian tìm kiếm không được vượt quá " + dateRangeLength + " ngày, vui lòng chọn lại", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (oldestDate.toLocalDate().isAfter(localFromDate.toLocalDate()) || oldestDate.toLocalDate().isAfter(localToDate.toLocalDate())) {
            JOptionPane.showMessageDialog(SelectDateDialog.this, "Không được chọn khoảng thời gian trước " + oldestDate.format(DateHelper.DATE_FORMATTER), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!this.canSelectAfterToday) {
            LocalDate today = LocalDate.now();
            if (localFromDate.toLocalDate().isAfter(today) || localToDate.toLocalDate().isAfter(today)) {
                JOptionPane.showMessageDialog(SelectDateDialog.this, "Không được chọn khoảng thời gian sau ngày hôm nay", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        DateRange dateRange = new DateRange(localFromDate, localToDate);
        this.callback.onDateRangeSelected(dateRange);
        this.dispose();
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton btnApply;
    private javax.swing.JButton btnCancel;
    private com.toedter.calendar.JDateChooser dcFrom;
    private com.toedter.calendar.JDateChooser dcTo;
    private javax.swing.JLabel lblFrom;
    private javax.swing.JLabel lblTo;
    private javax.swing.JPanel pContainer;
    // End of variables declaration                   
}
